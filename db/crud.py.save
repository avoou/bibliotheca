

from sqlalchemy.orm import Session
from . import models, schemas
from sqlalchemy.exc import PendingRollbackError

def get_user_by_email(db: Session, email: str):
    pass

'''def add_book(db: Session, book: schemas.BookAdd):
    """try:
...     db.commit()
... except sqlalchemy.exc.PendingRollbackError:
...     print(1)"""
    db_book = models.Book(title=book.title, description=book.description)
    db_author = get_author_by_fullname(db=db, full_name=book.authors)
    if not db_author:
        db_author = models.Author(full_name=book.authors, fast_facts=None)

    """for author in book.authors:
        db_author = get_author_by_fullname(db=db, full_name=author)
        if not db_author:
            db_book = models.Book(title=book.title, description=book.description)
        db_book.authors.append(db_author)"""

    db_book.authors.append(db_author)
    db.add(db_book)
    db.commit()
    db.refresh(db_book)
    return db_book'''

def add_book(db: Session, book: schemas.BookAdd):
    
    book_authors = [author.full_name for author in book.authors]
    print(book_authors)
    db_books = get_books_by_title(db=db, title=book.title)
    print(db_books)
    if db_books:
        for db_book in db_books:
            comp = [author.full_name for author in db_book.authors]
            print(comp)
            if book_authors == comp:
                return False
    db_book = models.Book(title=book.title, description=book.description)

    db_book.authors.extend([models.Author(full_name=author.full_name, fast_facts=None) for author in book.authors])
    db.add(db_book)
    db.commit()
    db.refresh(db_book)
    return db_book


def get_books_by_title(db: Session, title: str):
    return db.query(models.Book).filter(models.Book.title == title).all()

def get_author_by_fullname(db: Session, full_name: str):
    return db.query(models.Author).filter(models.Author.full_name == full_name).first()

def book_change(db: Session, book: schemas.BookChange):
    pass

#db.query(models.Book).filter(models.Book.authors.any(models.Book.authors.in_([1]))) что то вроде этого должно быть
#db.query(models.Author).filter(models.Author.books.any(title="book1")).all() возвращает всех авторов у которых есть книга с таким названием
https://www.google.com/search?q=%D0%A7%D1%82%D0%BE+%D1%81%D0%BA%D1%80%D1%8B%D0%B2%D0%B0%D0%B5%D1%82+%D0%B2%D0%BE%D0%B4%D0%B0+(2020)&sourceid=chrome&ie=UTF-8
"""
print(db.query(models.Book).filter(models.Book.authors.any(models.Author.full_name.in_(['author1', 'a']))))
SELECT books.id AS books_id, books.title AS books_title, books.description AS books_description
FROM books
WHERE EXISTS (SELECT 1
FROM authors_books, authors
WHERE books.id = authors_books.book_id AND 
	authors.id = authors_books.author_id AND 
	authors.full_name IN (__[POSTCOMPILE_full_name_1]))"""

print(db.query(models.Book).filter(models.Author.full_name == 'author1', models.Author.full_name == 'author2'))
SELECT books.id AS books_id, books.title AS books_title, books.description AS books_description
FROM books, authors
WHERE authors.full_name = %(full_name_1)s AND authors.full_name = %(full_name_2)s
